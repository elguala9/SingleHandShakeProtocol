
// Bundle of types from "backfill-config" and packages it references.
// This file was generated by dts-bundle-generator and packages/lage/scripts/update-dts-bundle.js

import { Readable } from 'stream';

export declare type AzureBlobCacheStorageConfig = {
	provider: "azure-blob";
	options: AzureBlobCacheStorageOptions;
};
export declare type AzureBlobCacheStorageOptions = AzureBlobCacheStorageConnectionStringOptions | AzureBlobCacheStorageContainerClientOptions;
export declare type AzureBlobCacheStorageConnectionStringOptions = {
	/** Retrieve this from the Azure portal for the blob storage. */
	connectionString: string;
	/** Name of the blob storage container. */
	container: string;
	/** Max size of a single package cache, in bytes. */
	maxSize?: number;
	/** One of the credential types from `@azure/identity`. */
	credential?: TokenCredentialLike;
};
export declare type AzureBlobCacheStorageContainerClientOptions = Pick<AzureBlobCacheStorageConnectionStringOptions, "maxSize"> & {
	/**
	 * Pre-created `ContainerClient` from `@azure/storage-blob`, as returned by
	 * `BlobServiceClient#getContainerClient`.
	 */
	containerClient: ContainerClientLike;
};
declare type ContainerClientLike = {
	getBlobClient: (hash: string) => unknown;
};
declare type TokenCredentialLike = {
	getToken: (scopes: string | string[], options?: any) => Promise<any>;
};
export declare function getAzureBlobConfigFromSerializedOptions(options: string): AzureBlobCacheStorageConfig;
declare const logLevelsObject: {
	silly: number;
	verbose: number;
	info: number;
	warn: number;
	error: number;
	mute: number;
};
declare type LogLevel = keyof typeof logLevelsObject;
declare type ConsoleLogger = {
	silly(...args: string[]): void;
	verbose(...args: string[]): void;
	info(...args: string[]): void;
	warn(...args: string[]): void;
	error(...args: string[]): void;
};
declare type Times = "hashTime" | "buildTime" | "putTime" | "fetchTime";
declare type Logger = ConsoleLogger & {
	setName(name: string): void;
	setHash(hash: string): void;
	setCacheProvider(cacheProvider: string): void;
	setHit(hit: boolean): void;
	setTime(type: Times): {
		stop(): void;
	};
	setMode(mode: string, logLevel: "verbose" | "info"): void;
	setHashOfOutput(hash: string): void;
	toFile(logFolder: string): Promise<void>;
	pipeProcessOutput(stdout: Readable | null, stderr: Readable | null): void;
};
export declare type NpmCacheStorageOptions = {
	/** Package name to publish */
	npmPackageName: string;
	/** URL of the npm registry */
	registryUrl: string;
	/** Path to a custom .npmrc file to use in place of `$HOME/.npmrc` */
	npmrcUserconfig?: string;
};
export declare type NpmCacheStorageConfig = {
	provider: "npm";
	options: NpmCacheStorageOptions;
};
export declare function getNpmConfigFromSerializedOptions(options: string): NpmCacheStorageConfig;
export interface ICacheStorage {
	fetch: (hash: string) => Promise<boolean>;
	put: (hash: string, filesToCache: string[]) => Promise<void>;
}
export declare type CustomStorageConfig = {
	provider: (logger: Logger, cwd: string) => ICacheStorage;
	name?: string;
};
export declare type CacheStorageConfig = {
	provider: "local";
} | {
	provider: "local-skip";
} | NpmCacheStorageConfig | AzureBlobCacheStorageConfig | CustomStorageConfig;
export declare const modesObject: {
	READ_ONLY: string;
	WRITE_ONLY: string;
	READ_WRITE: string;
	PASS: string;
};
export declare type BackfillModes = keyof typeof modesObject;
export declare function isCorrectMode(mode: string): mode is BackfillModes;
/** @deprecated not used */
export declare type HashGlobs = string[];
export declare type Config = {
	/**
	 * Cache storage provider name and potentially configuration.
	 * @default { provider: "local" }
	 */
	cacheStorageConfig: CacheStorageConfig;
	/**
	 * Glob patterns for the built/generated files that should be hashed and
	 * cached, relative to the root of each package.
	 *
	 * Example: To cache `package-a/lib` and `package-a/dist/bundles`, use
	 * `outputGlob: ["lib/**\/*", "dist/bundles/**\/*"]`
	 * (removing the backslashes--those are just for comment syntax parsing)
	 *
	 * Defaults to `["lib/**"]`.
	 */
	outputGlob: string[];
	/**
	 * Whether to delete the `outputGlob` files on completion.
	 * @default false
	 */
	clearOutput: boolean;
	/**
	 * Absolute path to local cache folder.
	 * @default "[packageRoot]/node_modules/.cache/backfill"
	 */
	internalCacheFolder: string;
	/**
	 * Absolute path to local log folder.
	 * @default "[packageRoot]/node_modules/.cache/backfill"
	 */
	logFolder: string;
	/**
	 * Log level: `"silly" | "verbose" | "info" | "warn" | "error" | "mute"`
	 * @default "info"
	 */
	logLevel: LogLevel;
	/**
	 * Name of the package, used for logging and performance reports.
	 * Defaults to name from `package.json`.
	 */
	name: string;
	/**
	 * Cache operation mode: `"READ_ONLY" | "WRITE_ONLY" | "READ_WRITE" | "PASS"`
	 * @default "READ_WRITE"
	 */
	mode: BackfillModes;
	/**
	 * Package root path.
	 * Defaults to searching for `package.json` in the current working directory.
	 */
	packageRoot: string;
	/**
	 * If true, write performance logs to `logFolder`.
	 * @default false
	 */
	producePerformanceLogs: boolean;
	/**
	 * If true, write the hash of the output files to the performance report.
	 * @default false
	 */
	validateOutput: boolean;
	/**
	 * Compute hashes to only cache changed files.
	 * @default false
	 */
	incrementalCaching: boolean;
	/** @deprecated Appears unused */
	performanceReportName?: string;
};
/**
 * Read the config from `backfill.config.js` (in `fromPath` and/or parents)
 * if present, fill in defaults for any values not provided, and apply overrides
 * from environment variables.
 */
export declare function createConfig(logger: Logger, fromPath: string): Config;
/**
 * Create a default config for the package containing `fromPath`.
 */
export declare function createDefaultConfig(fromPath: string): Config;
/**
 * Get the package name from `<packageRoot>/package.json`.
 */
export declare function getName(packageRoot: string): any;
/**
 * Get a list of `backfill.config.js` file paths, starting at `fromPath` and
 * searching upward.
 */
export declare function getSearchPaths(fromPath: string): string[];
/**
 * Get the config from `process.env.BACKFILL_*`:
 * - `BACKFILL_CACHE_PROVIDER` for `Config.cacheStorageConfig.provider`
 * - `BACKFILL_CACHE_PROVIDER_OPTIONS` for `Config.cacheStorageConfig.options`
 * - For other `Config` properties, `BACKFILL_*` snake case version of option,
 *   e.g. `BACKFILL_LOG_LEVEL` for `Config.logLevel`
 *
 * Arrays and objects should be the `JSON.stringify`ed form of the value.
 */
export declare function getEnvConfig(logger: Logger): Partial<Config>;

export {};
